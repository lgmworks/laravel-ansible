---
- name: Generate code directory name prefix
  command:
    cmd: date +"%Y-%m-%d_%H-%M-%S"
  register: date_prefix_output

- name: Setting date_prefix variable
  ansible.builtin.set_fact:
    date_prefix: "{{date_prefix_output['stdout']}}"

- name: Create the versions directory
  ansible.builtin.file:
    path: "{{code_path}}/versions"
    state: directory
    recurse: yes
    owner: "{{remote_user}}"
    group: "{{remote_user}}"

- name: delete current directory
  ansible.builtin.file:
    path: "{{code_path}}/versions/current"
    state: absent

- name: clone the repo
  git:
    repo: "{{repo_url}}"
    dest: "{{ code_path }}/versions/current"
    version: "main"
    accept_hostkey: yes
  become_user: "{{ remote_user }}"
  become: yes

- name: Extract hash
  command:
    cmd: git log -n 1 --format="%h"
    chdir: "{{code_path}}/versions/current"
  register: hash_output

- name: Setting commit_hash variable
  ansible.builtin.set_fact:
    commit_hash: "{{hash_output['stdout']}}"

- name: Setting host facts using complex arguments
  ansible.builtin.set_fact:
    current_path: "{{code_path}}/versions/{{date_prefix}}_{{commit_hash}}"

- debug: var=commit_hash

- name: delete current hash directory
  ansible.builtin.file:
    path: "{{current_path}}"
    state: absent

- name: Rename current to hash
  shell: "mv {{code_path}}/versions/current {{current_path}}"
  become_user: "{{remote_user}}"

- name: Copy .env, only first time
  template:
    src: punto_env.j2
    dest: "{{code_path}}/.env"
    force: false
    owner: "{{ remote_user }}"
    group: "{{ remote_user }}"

- name: Create symlink to the .env
  ansible.builtin.file:
    src: "{{ code_path }}/.env"
    dest: "{{ current_path }}/.env"
    state: link
  become_user: "{{ remote_user }}"
  become: yes

- name: copy the cleanup script
  template:
    src: cleanup_versions.py.j2
    dest: "{{code_path}}/versions/cleanup_versions.py"
    owner: "{{ remote_user }}"
    group: www-data

- name: composer install
  command:
    cmd: composer install
    chdir: "{{ current_path }}"
  become_user: "{{ remote_user }}"
  become: no

- name: npm run install
  command:
    cmd: npm i
    chdir: "{{ current_path }}"
  become_user: "{{ remote_user }}"
  become: no


- name: npm main build
  command:
    cmd: npm run build
    chdir: "{{ current_path }}"
  become_user: "{{ remote_user }}"
  become: no


- name: Add user ubuntu to www-data
  user:
    name: "{{remote_user}}"
    groups: www-data
    append: yes



- name: Set code directory permissions
  command: "{{ item }}"
  args:
    chdir: "{{current_path}}"
  become: yes
  with_items:
    - "git config core.fileMode false"
    - "usermod -a -G {{remote_user}} {{ remote_user }}"
    - "chown -R {{remote_user}}:{{remote_user}} {{ current_path }}"
    - "find {{ current_path }} -type f -exec chmod 664 {} \\;"
    - "find {{ current_path }} -type d -exec chmod 755 {} \\;"
    - "chown -R {{remote_user}}:{{remote_user}} {{ current_path }}"
    - "chgrp -R {{remote_user}} storage bootstrap/cache"
    - "chmod -R ug+rwx storage bootstrap/cache"

- name: Migrations and database state
  command:
    cmd: "{{item}}"
    chdir: "{{ current_path }}"
  with_items:
    - php artisan migrate --force
#    - php artisan ensure-database-state-is-loaded

- name: Create symlink to the commit directory
  ansible.builtin.file:
    src: "{{ current_path }}"
    dest: "{{ code_path }}/current"
    state: link
    force: yes
    owner: "ubuntu"
    group: ubuntu
  become: no  

- name: Queue restart and notify deploy
  command:
    cmd: "{{item}}"
    chdir: "{{ current_path }}"
  with_items:
    - sudo service nginx reload
    - php artisan optimize 
    - php artisan queue:restart
    - "sudo service php{{php_version}}-fpm reload"
    - sudo supervisorctl restart all 

- name: Cleanup oldest versions
  shell:
    chdir: "{{ code_path }}/versions"
    cmd: "python3 cleanup_versions.py"
  become: no
