---
- name: delete default site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
# - name: delete nginx.conf
#   file:
#     path: /etc/nginx/nginx.conf
#     state: absent

- name: Write the nginx.conf
  template: src=configs/nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify: restart nginx

- name: write the fastcgi_params
  template: src=configs/fastcgi_params dest=/etc/nginx/fastcgi_params
  notify: restart nginx

- name: Write several configs
  template: src="configs/{{item}}.j2" dest="/etc/nginx/conf.d/{{item}}"
  with_items:
    - cloudfare.conf
    - gzip.conf
    - uploads.conf
  notify: restart nginx

- name: 'Get certificate'
  command: '/snap/bin/certbot -n --nginx certonly -d {{sites[item].domain_name}}'
  args:
    creates: '/etc/letsencrypt/live/{{sites[item].domain_name}}'
  ignore_errors: no
  with_items: "{{sites}}"
  tags:
    - nginx
    - certbot

- name: "Write {{sites[item].base_domain_name}} server block"
  template:
    src: sites/base-domain-config.j2
    dest: "/etc/nginx/sites-available/{{sites[item].base_domain_name}}"
  notify: restart nginx
  when: sites[item].base_domain_name
  with_items: "{{sites}}"

- name: "Create a symbolic link for {{sites[item].base_domain_name}}"
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{sites[item].base_domain_name}}"
    dest: "/etc/nginx/sites-enabled/{{sites[item].base_domain_name}}"
    owner: "{{ remote_user }}"
    group: "{{ remote_user }}"
    state: link
  notify: restart nginx
  when: sites[item].base_domain_name
  with_items: "{{sites}}"

- name: "Write {{sites[item].domain_name}} server block"
  template:
    src: sites/main-domain-config.j2
    dest: "/etc/nginx/sites-available/{{sites[item].domain_name}}"
  notify: restart nginx
  with_items: "{{sites}}"

- name: "Create a symbolic link for {{sites[item].domain_name}}"
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{sites[item].domain_name}}"
    dest: "/etc/nginx/sites-enabled/{{sites[item].domain_name}}"
    owner: "{{ remote_user }}"
    group: "{{ remote_user }}"
    state: link
  notify: restart nginx
  with_items: "{{sites}}"

- name: create main dir
  file:
    path: "{{ sites[item].code_path }}"
    state: directory
    group: "www-data"
    owner: "{{remote_user}}"
  with_items: "{{sites}}"

- name: set permissions to main directory
  command: "chmod g+s {{ sites[item].code_path }}"
  become: Yes
  become_user: "{{remote_user}}"
  with_items: "{{sites}}"

- name: set permissions to main directory g+x
  command: "chmod 755 {{ sites[item].code_path }}"
  become: Yes
  become_user: "{{remote_user}}"
  with_items: "{{sites}}"

- name: create public dir
  file:
    path: "{{ sites[item].code_path }}/public"
    state: directory
    group: "{{remote_user}}"
    owner: "{{remote_user}}"
  with_items: "{{sites}}"

- name: create artisan mock dir
  file:
    path: "{{ sites[item].code_path }}/artisan_current/public"
    state: directory
    group: "{{remote_user}}"
    recurse: true
    owner: "{{ remote_user }}"
  with_items: "{{sites}}"

- name: "Create a temporal symbolic link for {{sites[item].domain_name}}"
  ansible.builtin.shell:
    cmd: "ln -s {{ sites[item].code_path }}/artisan_current {{ sites[item].code_path }}/current"
  notify: restart nginx
  become: yes
  with_items: "{{sites}}"
  ignore_errors: yes

- name: "write index.html in {{sites[item].code_path}}"
  template:
    src: index.html
    dest: "{{ sites[item].code_path }}/artisan_current/public/index.html"
  with_items: "{{sites}}" 

- name: mock artisan
  template:
    src: artisan.j2
    dest: "{{ sites[item].code_path }}/artisan_current/artisan"
  with_items: "{{sites}}"

- name: Make artisan file executable
  file:
    path: "{{ sites[item].code_path }}/current/artisan"
    owner: "{{remote_user}}"
    group: "{{remote_user}}"
    mode: "+x"
  with_items: "{{sites}}"
